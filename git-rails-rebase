#!/bin/bash

set -e

branch=$1

resolve_conflicts () {
  conflicted_files=($(git diff --name-only --diff-filter=U --relative)) # Store conflicted files in an array
  echo $conflicted_files

  # Check if all files are SQL files within db/ using grep directly in the if condition
  if echo "${conflicted_files[@]}" | grep -vq "^db/.*\.sql$"; then
    structure_clean=2 # If grep finds any file not matching the pattern, set to 2
  else
    echo "All conflicts are in db/*.sql, re-generating..."

    for sql_file in "${conflicted_files[@]}"; do
      # Extract role name from the filename
      if [[ "$sql_file" == "db/structure.sql" ]]; then
        db_role="primary"
      else
        db_role=$(echo "$sql_file" | sed -n 's/db\/\(.*\)_structure.sql/\1/p')
      fi

      echo "Dumping and resolving schema for database role: $db_role"
      bin/rake db:schema:dump:$db_role # Adjust the environment as needed
      git add "$sql_file" # Add the file immediately after dumping

      if GIT_EDITOR=true git rebase --continue; then
        echo "Conflict resolved for $sql_file"
        structure_clean=0 # Conflict resolved successfully for this file
      else
        echo "Issue while resolving conflict for $sql_file"
        structure_clean=1 # An issue occurred while rebasing
        break # Exit loop if rebase fails
      fi
    done
  fi
}


if [ -z "$branch" ]; then
  echo "Pass branch name as first argument"
  exit -1
fi

if [ -z "$(git diff-index --quiet HEAD)" ]; then
  git fetch origin
  structure_clean=0

  if ! git rebase origin/$branch --quiet; then
    structure_clean=1
    while [ $structure_clean -eq 1 ]; do
      resolve_conflicts
    done
  fi

  if [ $structure_clean -eq 0 ]; then
    git push -f
  fi

  if [ $structure_clean -eq 2 ]; then
    echo "Other conflicts detected, fix it manually"
  fi

else
  echo "Dirty working directory"
fi